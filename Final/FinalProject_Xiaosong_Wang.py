# -*- coding: utf-8 -*-
"""
Created on Mon Dec  7 15:52:24 2020

@ author: simon

@ reference1: https://realpython.com/face-recognition-with-python/
@ reference2: "haarcascade_frontalface_default.xml" was cloned from
              https://github.com/shantnu/FaceDetect
"""

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt


##############################################################################

# Definition for adding Mosaic
def add_Mosaic(depts, start, end):
    '''
    Parameters
    ----------
    depts : 
        the size of each Mosaic element. 
        The lower number, the smaller size of Mosaic, the clear the image is.
    start : 
        the origin of where the Mosaic start on x-axis.
    end : 
        the origin of where the Mosaic start on y-axis.

    Returns: 
        the image with Mosaic on specified location
    -------
    '''
  
    for i in range(start[0], start[1], depts):
        for j in range(end[0], end[1], depts):
            
            img[i:i + depts, j:j + depts] = img[i + (depts // 2)][j + (depts // 2)]
            
    # plt.figure()
    # plt.title('Mosaic')        
    # plt.imshow(cv.cvtColor(img, cv.COLOR_BGR2RGB))
    
            
##############################################################################

# Get user supplied values
imagePath = "./face.jpg"
cascPath = "haarcascade_frontalface_default.xml"

# Create the haar cascade
faceCascade = cv.CascadeClassifier(cascPath)

##############################################################################

# Read the original image and print it out
img = cv.imread(imagePath)
plt.figure()
plt.title('Face Original Image')
plt.imshow(cv.cvtColor(img, cv.COLOR_BGR2RGB))

gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

##############################################################################

# Detect faces in the image
faces = faceCascade.detectMultiScale(
    
    gray,
    scaleFactor = 1.1,
    minNeighbors = 5,
    minSize = (30,30),
)

##############################################################################

# # Draw a rectangle arounD the faces and plot it out
# for (x, y, w, h) in faces:
#     cv.rectangle(img, (x,y), (x+w,y+h), (0, 255, 0), 2)
#     face = img[y:y+h, x:x+w, :]
#     plt.figure()
#     plt.title('face')
#     plt.imshow(cv.cvtColor(img, cv.COLOR_BGR2RGB))

##############################################################################

# Add Mosaics sorunding the detected face based on the coordinate generated by face detector 
for (x, y, w, h) in faces:
    '''
    x and y are the coordinate location of the detected face rectangle,
    w and h are the width and height of the detected face rectangle.
    '''
    add_Mosaic(5, (0, y), (x, x+w))
    add_Mosaic(5, (0, 240), (x+w, 320))
    add_Mosaic(5, (y+h, 240), (x, x+w))
    add_Mosaic(5, (0, 240), (0, x))
    
##############################################################################
    
# Plot the final result
plt.figure()
plt.title('Mosaic')        
plt.imshow(cv.cvtColor(img, cv.COLOR_BGR2RGB))

##############################################################################

